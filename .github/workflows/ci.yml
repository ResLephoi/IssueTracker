name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]
env:
  NODE_VERSION: '20.x'
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'IssueTracker.sln'
  BUILD_CONFIGURATION: 'Release'
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Cache NuGet Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-  
        
      - name: Restore dependencies
        working-directory: server/IssueTracker
        run: dotnet restore ${{ env.SOLUTION_PATH }}
        
      - name: Build
        working-directory: server/IssueTracker
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        
      - name: Test with Coverage
        working-directory: server/IssueTracker
        run: |
          dotnet test ${{ env.SOLUTION_PATH }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=coverage.xml

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Verify coverage > 50%
        working-directory: server/IssueTracker
        run: |
          COVERAGE=$(xmllint --xpath "string(//*[local-name()='coverage']/@line-rate)" coverage.xml)
          COVERAGE_PERCENT=$(awk "BEGIN {print $COVERAGE * 100}")
          echo "Coverage: $COVERAGE_PERCENT%"
          if (( $(echo "$COVERAGE_PERCENT < 50.0" | bc -l) )); then
            echo "Code coverage is below 50%."
            exit 1
          fi

  client-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: client
        run: npm install

      - name: Build client
        working-directory: client
        run: npm run build
